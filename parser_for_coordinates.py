"""
Coordinate Parser Module

This module provides functionality to parse coordinate points from XML-formatted strings
generated by the Vision-Language Model (VLM).
"""

import xml.etree.ElementTree as ET
from typing import Dict, Any, List, Union
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def parse_points(points_str: str) -> Dict[str, Dict[str, Union[str, List[float]]]]:
    """
    Parse coordinate points from an XML-formatted string.
    
    Args:
        points_str: XML-formatted string containing point coordinates
        
    Returns:
        Dictionary containing parsed points with their types and coordinates
        
    Example:
        Input: '<points x1="40.2" y1="39.5" x2="47.7" y2="39.0" alt="building, ">'
        Output: {
            'building_1': {'type': 'building', 'coordinates': [40.2, 39.5]},
            'building_2': {'type': 'building', 'coordinates': [47.7, 39.0]}
        }
        
    Raises:
        ET.ParseError: If the input string is not valid XML
        ValueError: If coordinate values cannot be converted to float
    """
    try:
        # Clean and prepare input string
        fixed_str = points_str.strip()
        if not fixed_str.startswith('<'):
            fixed_str = f'<points {fixed_str}>'
        if not fixed_str.endswith('>'):
            fixed_str += '</points>'
            
        # Parse XML
        root = ET.fromstring(fixed_str)
        
        # Initialize output dictionary
        output: Dict[str, Dict[str, Union[str, List[float]]]] = {}
        
        # Extract building type from alt attribute
        building_type = (
            root.attrib.get('alt', '').strip().split(',')[0]
            if 'alt' in root.attrib
            else 'building'
        )
        
        # Extract coordinates
        for i in range(1, 50):  # Support up to 50 points
            x_attr = f"x{i}"
            y_attr = f"y{i}"
            
            if x_attr in root.attrib and y_attr in root.attrib:
                try:
                    x = float(root.attrib[x_attr])
                    y = float(root.attrib[y_attr])
                    
                    output[f"{building_type}_{i}"] = {
                        "type": building_type,
                        "coordinates": [x, y]
                    }
                except ValueError as e:
                    logger.warning(f"Could not convert coordinates for point {i} to float: {e}")
                    continue
                    
        if not output:
            logger.warning("No valid points found in input string")
            
        return output
        
    except ET.ParseError as e:
        logger.error(f"Failed to parse XML string: {e}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error while parsing points: {e}")
        raise

if __name__ == "__main__":
    # Example usage and testing
    example_input = '<points x1="40.2" y1="39.5" x2="47.7" y2="39.0" x3="64.9" y3="41.2" x4="65.2" y4="87.9" x5="80.2" y5="20.7" x6="80.2" y6="20.7" alt="building, ">building, </points>'
    try:
        result = parse_points(example_input)
        logger.info("Successfully parsed points:")
        for point_id, point_data in result.items():
            logger.info(f"{point_id}: {point_data}")
    except Exception as e:
        logger.error(f"Error in example: {e}")